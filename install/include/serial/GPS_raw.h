// Generated by gencpp from file serial/GPS_raw.msg
// DO NOT EDIT!


#ifndef SERIAL_MESSAGE_GPS_RAW_H
#define SERIAL_MESSAGE_GPS_RAW_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace serial
{
template <class ContainerAllocator>
struct GPS_raw_
{
  typedef GPS_raw_<ContainerAllocator> Type;

  GPS_raw_()
    : gps1()
    , gps2()
    , gps3()
    , gps4()  {
    }
  GPS_raw_(const ContainerAllocator& _alloc)
    : gps1(_alloc)
    , gps2(_alloc)
    , gps3(_alloc)
    , gps4(_alloc)  {
  (void)_alloc;
    }



   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _gps1_type;
  _gps1_type gps1;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _gps2_type;
  _gps2_type gps2;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _gps3_type;
  _gps3_type gps3;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _gps4_type;
  _gps4_type gps4;




  typedef boost::shared_ptr< ::serial::GPS_raw_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::serial::GPS_raw_<ContainerAllocator> const> ConstPtr;

}; // struct GPS_raw_

typedef ::serial::GPS_raw_<std::allocator<void> > GPS_raw;

typedef boost::shared_ptr< ::serial::GPS_raw > GPS_rawPtr;
typedef boost::shared_ptr< ::serial::GPS_raw const> GPS_rawConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::serial::GPS_raw_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::serial::GPS_raw_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace serial

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': False}
// {'serial': ['/home/arpad/catkin_ws/src/serial/msg'], 'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::serial::GPS_raw_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::serial::GPS_raw_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::serial::GPS_raw_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::serial::GPS_raw_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::serial::GPS_raw_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::serial::GPS_raw_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::serial::GPS_raw_<ContainerAllocator> >
{
  static const char* value()
  {
    return "c1a03139f538dcea96e4b207ccd55dd5";
  }

  static const char* value(const ::serial::GPS_raw_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xc1a03139f538dceaULL;
  static const uint64_t static_value2 = 0x96e4b207ccd55dd5ULL;
};

template<class ContainerAllocator>
struct DataType< ::serial::GPS_raw_<ContainerAllocator> >
{
  static const char* value()
  {
    return "serial/GPS_raw";
  }

  static const char* value(const ::serial::GPS_raw_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::serial::GPS_raw_<ContainerAllocator> >
{
  static const char* value()
  {
    return "string gps1\n\
string gps2\n\
string gps3\n\
string gps4\n\
";
  }

  static const char* value(const ::serial::GPS_raw_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::serial::GPS_raw_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.gps1);
      stream.next(m.gps2);
      stream.next(m.gps3);
      stream.next(m.gps4);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER;
  }; // struct GPS_raw_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::serial::GPS_raw_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::serial::GPS_raw_<ContainerAllocator>& v)
  {
    s << indent << "gps1: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.gps1);
    s << indent << "gps2: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.gps2);
    s << indent << "gps3: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.gps3);
    s << indent << "gps4: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.gps4);
  }
};

} // namespace message_operations
} // namespace ros

#endif // SERIAL_MESSAGE_GPS_RAW_H
